Перем юТест;
Перем Утверждения;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	юТест = ЮнитТестирование;
	Утверждения = юТест;
	
	ВсеТесты = Новый Массив;
	// Plugin interface
	ВсеТесты.Добавить("ТестДолжен_ПроверитьОписаниеПлагина");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеПлагинаПоИдентификатору");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьУстановкуЯдра");
	
	// Loader interface
	ВсеТесты.Добавить("ТестДолжен_ПроверитьУстановкуИПолучениеПутиОтЗагрузчика");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЗагрузкуТестов");

	
	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

// { Plugin interface
Процедура ТестДолжен_ПроверитьОписаниеПлагина() Экспорт
	ЗагрузчикТестов = юТест.ЗагрузчикПоУмолчанию();
	ОписаниеПлагина = ЗагрузчикТестов.ОписаниеПлагина();
	Утверждения.ПроверитьРавенство(ОписаниеПлагина.Тип, юТест.ТипыПлагинов().Загрузчик, "ОписаниеПлагина.Тип, юТест.ТипыПлагинов().Загрузчик");
	Утверждения.ПроверитьРавенство(ОписаниеПлагина.Идентификатор, "ЗагрузчикФС", "ОписаниеПлагина.Идентификатор");
	Утверждения.ПроверитьРавенство(ОписаниеПлагина.Представление, "Загрузить тесты из файловой системы", "ОписаниеПлагина.Представление");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеПлагинаПоИдентификатору() Экспорт
	ЗагрузчикТестов = юТест.Плагин("ЗагрузчикФС");
	ОписаниеПлагина = ЗагрузчикТестов.ОписаниеПлагина();
	Утверждения.ПроверитьРавенство(ОписаниеПлагина.Тип, юТест.ТипыПлагинов().Загрузчик, "ОписаниеПлагина.Тип, юТест.ТипыПлагинов().Загрузчик");
	Утверждения.ПроверитьРавенство(ОписаниеПлагина.Идентификатор, "ЗагрузчикФС", "ОписаниеПлагина.Идентификатор");
	Утверждения.ПроверитьРавенство(ОписаниеПлагина.Представление, "Загрузить тесты из файловой системы", "ОписаниеПлагина.Представление");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьУстановкуЯдра() Экспорт
	ЗагрузчикТестов = юТест.Плагин("ЗагрузчикФС");
	Ядро = ЗагрузчикТестов.ПолучитьЯдро();
	Утверждения.ПроверитьРавенство(Ядро, юТест, "Ядро = юТест");
КонецПроцедуры
// } Plugin interface

// { Loader interface
Процедура ТестДолжен_ПроверитьУстановкуИПолучениеПутиОтЗагрузчика() Экспорт
	ЗагрузчикТестов = юТест.ЗагрузчикПоУмолчанию();
	ТестовыйПуть = "c:\windows\";
	ЗагрузчикТестов.УстановитьПуть(ТестовыйПуть);
	
	Путь = ЗагрузчикТестов.ПолучитьПуть();
	
	Утверждения.ПроверитьРавенство(Путь, ТестовыйПуть);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗагрузкуТестов() Экспорт
	ПутьКФайлуСТестами = Новый Файл(ПолучитьИмяВременногоФайла(".epf"));
	ЭтотОбъект.ПолучитьМакет("ТестовыйНаборДляЗагрузчикаФС").Записать(ПутьКФайлуСТестами.ПолноеИмя);
	
	ЗагрузчикТестов = юТест.ЗагрузчикПоУмолчанию();
	ЗагрузчикТестов.УстановитьПуть(ПутьКФайлуСТестами.ПолноеИмя);
	ДеревоТестов = ЗагрузчикТестов.Загрузить();
	
	Утверждения.ПроверитьТип(ДеревоТестов, "Массив", "ДеревоТестов");
	Утверждения.ПроверитьРавенство(ДеревоТестов.Количество(), 1, "Узлы верхнего уровня");
	Контейнер = ДеревоТестов[0];
	Утверждения.ПроверитьРавенство(Контейнер.Тип, юТест.ТипыУзловДереваТестов().Контейнер, "Контейнер.Тип");
	Утверждения.ПроверитьРавенство(Контейнер.Имя, ПутьКФайлуСТестами.ИмяБезРасширения, "Контейнер.Имя");
	Утверждения.ПроверитьТип(Контейнер.Строки, "Массив", "Контейнер.Строки");
	Утверждения.ПроверитьРавенство(Контейнер.Строки.Количество(), 3, "Контейнер.Строки.Количество()");
	
	Элемент1 = Контейнер.Строки[0];
	Утверждения.ПроверитьРавенство(Элемент1.Тип, юТест.ТипыУзловДереваТестов().Элемент, "Элемент1.Тип");
	Утверждения.ПроверитьРавенство(Элемент1.Путь, ПутьКФайлуСТестами.ПолноеИмя, "Элемент1.Путь");
	Утверждения.ПроверитьРавенство(Элемент1.ИмяТеста, "УспешныйТест", "Элемент1.ИмяТеста");
	
	Элемент3 = Контейнер.Строки[2];
	Утверждения.ПроверитьРавенство(Элемент3.Тип, юТест.ТипыУзловДереваТестов().Элемент, "Элемент3.Тип");
	Утверждения.ПроверитьРавенство(Элемент3.Путь, ПутьКФайлуСТестами.ПолноеИмя, "Элемент3.Путь");
	Утверждения.ПроверитьРавенство(Элемент3.ИмяТеста, "НесуществующийТест", "Элемент3.ИмяТеста");
	
	УдалитьФайлы(ПутьКФайлуСТестами);
КонецПроцедуры
// } Loader interface
