{2,
{28,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{17,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{0,0,1},0,1},0,"","",1,
{17,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,0,1}
},"&НаКлиенте
Перем юТест;
&НаКлиенте
Перем Утверждения;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	юТест = ЮнитТестирование;
	Утверждения = юТест;
	
	ВсеТесты = Новый Массив;
	
	// Plugin interface
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьОписаниеПлагина"");
	
	// Core
	ВсеТесты.Добавить(""ТестДолжен_ПроверитьПолучениеПлагинаПоИдентификатору"");
	ВсеТесты.Добавить(""ТестДолжен_ПолучитьСписокЗагруженныхПлагиновПоТипу"");
	
	Возврат ВсеТесты;
КонецФункции

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

// { Plugin interface
&НаКлиенте
Процедура ТестДолжен_ПроверитьОписаниеПлагина() Экспорт
	ЗагрузчикТестов = юТест.ЗагрузчикПоУмолчанию();
	ВозможныеТипыПлагинов = юТест.ТипыПлагинов();
	ОписаниеПлагина = ЗагрузчикТестов.ОписаниеПлагина(ВозможныеТипыПлагинов);
	Утверждения.ПроверитьРавенство(ОписаниеПлагина.Тип, ВозможныеТипыПлагинов.Загрузчик, ""ОписаниеПлагина.Тип, юТест.ТипыПлагинов().Загрузчик"");
	Утверждения.ПроверитьРавенство(ОписаниеПлагина.Идентификатор, ""ЗагрузчикФайла"", ""ОписаниеПлагина.Идентификатор"");
	Утверждения.ПроверитьРавенство(ОписаниеПлагина.Представление, ""Загрузить тесты из файловой системы"", ""ОписаниеПлагина.Представление"");
КонецПроцедуры
// } Plugin interface

// { Core
&НаКлиенте
Процедура ТестДолжен_ПроверитьПолучениеПлагинаПоИдентификатору() Экспорт
	ЗагрузчикТестов = юТест.Плагин(""ЗагрузчикФайла"");
	ВозможныеТипыПлагинов = юТест.ТипыПлагинов();
	ОписаниеПлагина = ЗагрузчикТестов.ОписаниеПлагина(ВозможныеТипыПлагинов);
	Утверждения.ПроверитьРавенство(ОписаниеПлагина.Тип, ВозможныеТипыПлагинов.Загрузчик, ""ОписаниеПлагина.Тип, юТест.ТипыПлагинов().Загрузчик"");
	Утверждения.ПроверитьРавенство(ОписаниеПлагина.Идентификатор, ""ЗагрузчикФайла"", ""ОписаниеПлагина.Идентификатор"");
	Утверждения.ПроверитьРавенство(ОписаниеПлагина.Представление, ""Загрузить тесты из файловой системы"", ""ОписаниеПлагина.Представление"");
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПолучитьСписокЗагруженныхПлагиновПоТипу() Экспорт
	ВозможныеТипыПлагинов = юТест.ТипыПлагинов();
	Загрузчики = юТест.ПолучитьИдентификаторыПлагиновПоТипу(ВозможныеТипыПлагинов.Загрузчик);
	
	Утверждения.ПроверитьТип(Загрузчики, ""Массив"", ""Загрузчики"");
	Утверждения.ПроверитьБольше(Загрузчики.Количество(), 0, ""Загрузчики.Количество()"");
	Для каждого ИдентификаторЗагрузчика Из Загрузчики Цикл
		ЗагрузчикТестов = юТест.Плагин(ИдентификаторЗагрузчика);
		ОписаниеПлагина = ЗагрузчикТестов.ОписаниеПлагина(ВозможныеТипыПлагинов);
		Утверждения.ПроверитьРавенство(ОписаниеПлагина.Тип, ВозможныеТипыПлагинов.Загрузчик, ""ОписаниеПлагина.Тип, юТест.ТипыПлагинов().Загрузчик"");
		Утверждения.ПроверитьЗаполненность(ОписаниеПлагина.Идентификатор, ""ОписаниеПлагина.Идентификатор"");
		Утверждения.ПроверитьЗаполненность(ОписаниеПлагина.Представление, ""ОписаниеПлагина.Представление"");
	КонецЦикла;
	
	ЗагрузчикПоУмолчанию = юТест.ЗагрузчикПоУмолчанию();
	ИндексЗагрузчика = Загрузчики.Найти(ЗагрузчикПоУмолчанию.ОписаниеПлагина(ВозможныеТипыПлагинов).Идентификатор);
	Утверждения.ПроверитьНеРавенство(ИндексЗагрузчика, Неопределено, ""ИндексЗагрузчика"");
КонецПроцедуры
// } Core
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",cd570446-fb13-4855-bb0e-5695a8e88940}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}